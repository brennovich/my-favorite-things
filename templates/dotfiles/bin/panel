#!/bin/sh
#
# It works by outputing content to a fifo in order to achieve better performance
# and avoid unnecessary frequent refreshes in some components
#
changecom(`"""')
panel_fifo=/tmp/panel.fifo

if [ $(pgrep -cx panel) -gt 1 ] ; then
  pkill -o panel
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$panel_fifo" ] && rm "$panel_fifo"

mkfifo "$panel_fifo"

# Display list of active desktops
#
# It fetchs the total of available desktops and filter the ones that has at
# least one window or the active one
#
current_workspace() {
  desktops_with_windows="$(for id in $(lsw -a); do \
    echo "$(xprop _NET_WM_DESKTOP -id $id)"; done \
    | grep -o " [0-9]\{1,2\}$" | tr -d " ")"
  current_desktop="$(xprop -root _NET_CURRENT_DESKTOP | cut -d " " -f3)"
  active_desktops="$(printf "%s\n%s" "$desktops_with_windows" "$current_desktop" | sort | uniq)"

  for desktop in $active_desktops; do
    if [ "$current_desktop" == "$desktop" ]; then
      printf " %s" "%{F#e3e3e3}%{+u}$(($desktop + 1))%{-u}%{F-}"
    else
      printf " %s" "$(($desktop + 1))"
    fi
  done
}

clock() {
  date "+%a %e %I:%M%P "
}

battery() {
  dual-battery-uevent

  ac="$(cat /sys/class/power_supply/AC/online)"
  capacity="$(cat ~/.my-favorite-things/dual-battery-uevent \
    | grep -wE 'POWER_SUPPLY_CAPACITY' \
    | cut -f 2 -d '=')"
  round_capacity="$(cut -d '.' -f1 <<< $capacity)"
  status="$(cat ~/.my-favorite-things/dual-battery-uevent \
    | grep -wE 'POWER_SUPPLY_STATUS' \
    | cut -f 2 -d '=')"

  if [ "$status" = "Full" ]; then
    printf "%s" "charged"
  elif [ $ac -eq 1 ]; then
    printf "%s%% %s" "$round_capacity" "%{F#e3e3e3}ac%{F-}"
  else
    energy="$(cat ~/.my-favorite-things/dual-battery-uevent \
      | grep -wE 'POWER_SUPPLY_ENERGY_NOW' \
      | cut -f 2 -d '=')"
    power="$(cat ~/.my-favorite-things/dual-battery-uevent \
      | grep -wE 'POWER_SUPPLY_POWER_NOW' \
      | cut -f 2 -d '=')"

    hours=$(($energy / $power))
    minutes=$(bc -l <<< "scale=3; $energy / $power")
    minutes=$(bc -l <<< "$minutes - $hours")
    minutes=$(printf "%02d" $(bc -l <<< "scale=1;$minutes * 60" | cut -d "." -f1))

    if [ $round_capacity -lt 11 ]; then
      printf "%s%% %s%s" "%{F#e3e3e3}%{+u}$capacity" "$hours:$minutes" "h%{-u}%{F-}"
    else
      printf "%02d%% %s" "$round_capacity" "$hours:$minutes"
    fi
  fi
}

load() {
  load=$(cut -d " " -f1 /proc/loadavg)

  if [ $(cut -d "." -f1 <<< $load) -gt 2 ]; then
    printf "%s" "%{F#e3e3e3}%{+u}$load¡%{-u}%{F-}"
  else
    printf "%s" "$load"
  fi
}

wifi_status() {
  ssid="$(iwconfig wlp4s0 | grep -o 'ESSID:".*"' | cut -d '"' -f2)"

  if [ "$ssid" = "" ]; then
    printf "%s" "%{F#e3e3e3}%{+u}down¡%{-u}%{F-}"
  else
    quality=$(bc -l <<< \
      "scale=1; \
      ($(iwconfig wlp4s0 | grep -o "Quality=[0-9]\{2,3\}/[0-9]\{2,3\}" | cut -d "=" -f2)) \
      * 100" \
      | cut -d "." -f1)

    printf "%s%% at %s" "$quality" "$ssid"
  fi
}

volume() {
  status="$(amixer get Master | grep -o '\[on\]\|\[off\]')"

  if [ "$status" = "[on]" ]; then
    vol="$(amixer get Master | grep -o "\[[0-9]\{2,3\}\%]" | tr -d '[]')"

    printf "%s" "$vol"
  else
    printf "%s" "%{F#e3e3e3}%{+u}muted¡%{-u}%{F-}"
  fi
}

while [[ true ]]; do
  printf "D%s\n" "$(current_workspace)"

  sleep 1
done > $panel_fifo &

while [[ true ]]; do
  printf "T %s\n" "$(clock)"

  sleep 30
done > $panel_fifo &

while [[ true ]]; do
  printf "B %s\n" "$(battery)"

  sleep 15
done > $panel_fifo &

while [[ true ]]; do
  printf "L %s\n" "$(load)"

  sleep 30
done > $panel_fifo &

while [[ true ]]; do
  printf "W %s\n" "$(wifi_status)"

  sleep 6
done > $panel_fifo &

while [[ true ]]; do
  printf "V %s\n" "$(volume)"

  sleep 3
done > $panel_fifo &

parse_fifo() {
  separator="%{color_o}|%{F-}"

  while read -r line ; do
    case $line in
      D*) workspace="${line#?}";;
      W*) wifi="${line#?}";;
      L*) load="${line#?}";;
      V*) volume="${line#?}";;
      B*) battery="${line#?}";;
      T*) time="${line#?}";;
    esac

    printf "%s\n" "%{l}$workspace%{r}$wifi $separator$load $separator$volume $separator$battery $separator$time %{}"
  done
}

parse_fifo < "$panel_fifo" \
  | lemonbar -b -B \patsubst(color_c, `#', `#F0') -F \color_e -f "Fira Mono:size=11" -g 1920x24+0+0 -u 2 \
  | while read line; do eval "$line"; done &

wait
changecom(`#')
